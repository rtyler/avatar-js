--- ../node/lib/string_decoder.js	2014-09-09 10:48:40.116414625 -0700
+++ src/main/js/lib/string_decoder.js	2014-09-09 12:44:26.311822716 -0700
@@ -38,15 +38,13 @@
   assertEncoding(encoding);
   switch (this.encoding) {
     case 'utf8':
-      // CESU-8 represents each of Surrogate Pair by 3-bytes
-      this.surrogateSize = 3;
-      break;
     case 'ucs2':
     case 'utf16le':
-      // UTF-16 represents each of Surrogate Pair by 2-bytes
-      this.surrogateSize = 2;
-      this.detectIncompleteChar = utf16DetectIncompleteChar;
-      break;
+      var decoder = new Packages.com.oracle.avatar.js.buffer.StringDecoder(Buffer._javaEncoding(encoding));
+      Object.defineProperty(this, '_decoder',  { writable: false, enumerable: false, value: decoder });
+      this.write = stringWrite;
+      this.end = stringEnd;
+      return;
     case 'base64':
       // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
       this.surrogateSize = 3;
@@ -66,6 +64,27 @@
   this.charLength = 0;
 };
 
+function stringWrite(buffer) {
+  // some old tests pass string.
+  if(!Buffer.isBuffer(buffer)) {
+      return buffer;
+  }
+  return this._decoder.write(buffer._impl);
+}
+
+function stringEnd(buffer) {
+  // some old tests pass string.
+  if(buffer && !Buffer.isBuffer(buffer)) {
+      return buffer;
+  }
+  var res = '';
+  if (buffer && buffer.length)
+    res = this.write(buffer);
+
+  res += this._decoder.end();
+
+  return res;
+}
 
 // write decodes the given buffer and returns it as JS string that is
 // guaranteed to not contain any partial multi-byte characters. Any partial
