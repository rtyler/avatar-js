--- ../node/lib/util.js	2013-08-08 17:37:17.154719503 -0700
+++ src/main/js/lib/util.js	2014-05-14 11:07:41.549570014 -0700
@@ -200,6 +200,11 @@
   return hash;
 }
 
+var ScriptUtils = Java.type("jdk.nashorn.api.scripting.ScriptUtils");
+exports.isJavaObject = function(obj) {
+  // Java thing, can be a Dynalink function, a java instance, a java class
+  return Java.isType(obj.class) || ScriptUtils.wrap(obj) === obj;
+}
 
 function formatValue(ctx, value, recurseTimes) {
   // Provide a hook for user-specified inspect functions.
@@ -218,12 +223,30 @@
     return primitive;
   }
 
+  if (exports.isJavaObject(value)) {
+    // equivalent to toString whatever toString exists or not
+    return "" + value;
+  }
+
   // Look up the keys of the object.
   var keys = Object.keys(value);
   var visibleKeys = arrayToHash(keys);
 
   if (ctx.showHidden) {
     keys = Object.getOwnPropertyNames(value);
+    if (isError(value)) {
+      // in nashorn the stack property is found on Error's prototype
+      // https://bugs.openjdk.java.net/browse/JDK-8043044
+      // https://bugs.openjdk.java.net/browse/JDK-8031983
+      var protoKeys = Object.getOwnPropertyNames(Error.prototype);
+      // exclude message, printStackTrace, getStackTrace, toString, constructor, toSource, dumpStack
+      // message is already present as an instance property
+      ['name', 'stack', 'lineNumber', 'columnNumber', 'fileName'].forEach(function(p) {
+        if (protoKeys.indexOf(p) != -1) {
+          keys.push(p);
+        }
+      });
+    }
   }
 
   // Some type of object without properties can be shortcutted.
