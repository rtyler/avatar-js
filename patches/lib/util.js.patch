--- ../node/lib/util.js	2013-08-08 17:37:17.154719503 -0700
+++ src/main/js/lib/util.js	2014-05-05 23:24:29.981823598 -0700
@@ -200,6 +200,11 @@
   return hash;
 }
 
+var ScriptUtils = Java.type("jdk.nashorn.api.scripting.ScriptUtils");
+exports.isJavaObject = function(obj) {
+  // Java thing, can be a Dynalink function, a java instance, a java class
+  return Java.isType(obj.class) && ScriptUtils.wrap(obj) === obj;
+}
 
 function formatValue(ctx, value, recurseTimes) {
   // Provide a hook for user-specified inspect functions.
@@ -218,6 +223,11 @@
     return primitive;
   }
 
+  if (exports.isJavaObject(value)) {
+    // equivalent to toString whatever toString exists or not
+    return "" + value;
+  }
+
   // Look up the keys of the object.
   var keys = Object.keys(value);
   var visibleKeys = arrayToHash(keys);
@@ -226,6 +236,9 @@
     keys = Object.getOwnPropertyNames(value);
   }
 
+  if (!ctx.showHidden && isError(value)) {
+      return formatError(value);
+  }
   // Some type of object without properties can be shortcutted.
   if (keys.length === 0) {
     if (typeof value === 'function') {
@@ -364,7 +377,7 @@
       str = ctx.stylize('[Setter]', 'special');
     }
   }
-  if (!hasOwnProperty(visibleKeys, key)) {
+  if (isError(value) || !hasOwnProperty(visibleKeys, key)) {
     name = '[' + key + ']';
   }
   if (!str) {
