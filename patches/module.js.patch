--- ../node/lib/module.js	2013-07-24 19:23:26.000000000 +0200
+++ src/main/js/lib/module.js	2013-07-24 19:24:04.000000000 +0200
@@ -325,6 +325,11 @@
     return request;
   }
 
+  // NASHORN aliases
+  if (request === 'https') {
+    return Module._resolveFilename('http', parent);
+  }
+
   var resolvedModule = Module._resolveLookupPaths(request, parent);
   var id = resolvedModule[0];
   var paths = resolvedModule[1];
@@ -361,7 +366,15 @@
 Module.prototype.require = function(path) {
   assert(typeof path === 'string', 'path must be a string');
   assert(path, 'missing path');
-  return Module._load(path, this);
+  var self = this;
+  var AccessController = java.security.AccessController;
+  var PrivilegedAction = java.security.PrivilegedAction;       
+  var loaded = AccessController.doPrivileged(new PrivilegedAction() {
+      run: function() {
+       return Module._load(path, self);
+      }
+  });
+  return loaded;
 };
 
 
@@ -373,8 +386,11 @@
 // Returns exception if any
 Module.prototype._compile = function(content, filename) {
   var self = this;
+  
   // remove shebang
+  if(content != null) {
   content = content.replace(/^\#\!.*/, '');
+  }
 
   function require(path) {
     return self.require(path);
@@ -434,7 +450,10 @@
   }
 
   // create wrapper function
-  var wrapper = Module.wrap(content);
+  var wrapper = null;
+  if(content != null) {
+    wrapper = Module.wrap(content);
+  }
 
   var compiledWrapper = runInThisContext(wrapper, filename, true);
   if (global.v8debug) {
@@ -470,8 +489,7 @@
 
 // Native extension for .js
 Module._extensions['.js'] = function(module, filename) {
-  var content = NativeModule.require('fs').readFileSync(filename, 'utf8');
-  module._compile(stripBOM(content), filename);
+  module._compile(null, filename);
 };
 
 
@@ -508,7 +526,9 @@
     var homeDir = process.env.HOME;
   }
 
-  var paths = [path.resolve(process.execPath, '..', '..', 'lib', 'node')];
+  // NASHORN: we do not install modules relative to the node.jar location
+  // but we look for modules (and test scripts) relative to the current dir)
+  var paths = [process.cwd()]; // [path.resolve(process.execPath, '..', '..', 'lib', 'node')];
 
   if (homeDir) {
     paths.unshift(path.resolve(homeDir, '.node_libraries'));
